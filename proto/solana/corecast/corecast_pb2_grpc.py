# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from solana.corecast import request_pb2 as solana_dot_corecast_dot_request__pb2
from solana.corecast import stream_message_pb2 as solana_dot_corecast_dot_stream__message__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in solana/corecast/corecast_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoreCastStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DexTrades = channel.unary_stream(
                '/solana_corecast.CoreCast/DexTrades',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribeTradesRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.DexTradeStreamMessage.FromString,
                _registered_method=True)
        self.DexOrders = channel.unary_stream(
                '/solana_corecast.CoreCast/DexOrders',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribeOrdersRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.DexOrderStreamMessage.FromString,
                _registered_method=True)
        self.DexPools = channel.unary_stream(
                '/solana_corecast.CoreCast/DexPools',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribePoolsRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.PoolLiquidityChangeStreamMessage.FromString,
                _registered_method=True)
        self.Transactions = channel.unary_stream(
                '/solana_corecast.CoreCast/Transactions',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribeTransactionsRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.ParsedTransactionStreamMessage.FromString,
                _registered_method=True)
        self.Transfers = channel.unary_stream(
                '/solana_corecast.CoreCast/Transfers',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribeTransfersRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.TransferStreamMessage.FromString,
                _registered_method=True)
        self.Balances = channel.unary_stream(
                '/solana_corecast.CoreCast/Balances',
                request_serializer=solana_dot_corecast_dot_request__pb2.SubscribeBalanceUpdateRequest.SerializeToString,
                response_deserializer=solana_dot_corecast_dot_stream__message__pb2.BalanceUpdateStreamMessage.FromString,
                _registered_method=True)


class CoreCastServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DexTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DexOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DexPools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreCastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DexTrades': grpc.unary_stream_rpc_method_handler(
                    servicer.DexTrades,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribeTradesRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.DexTradeStreamMessage.SerializeToString,
            ),
            'DexOrders': grpc.unary_stream_rpc_method_handler(
                    servicer.DexOrders,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribeOrdersRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.DexOrderStreamMessage.SerializeToString,
            ),
            'DexPools': grpc.unary_stream_rpc_method_handler(
                    servicer.DexPools,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribePoolsRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.PoolLiquidityChangeStreamMessage.SerializeToString,
            ),
            'Transactions': grpc.unary_stream_rpc_method_handler(
                    servicer.Transactions,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribeTransactionsRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.ParsedTransactionStreamMessage.SerializeToString,
            ),
            'Transfers': grpc.unary_stream_rpc_method_handler(
                    servicer.Transfers,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribeTransfersRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.TransferStreamMessage.SerializeToString,
            ),
            'Balances': grpc.unary_stream_rpc_method_handler(
                    servicer.Balances,
                    request_deserializer=solana_dot_corecast_dot_request__pb2.SubscribeBalanceUpdateRequest.FromString,
                    response_serializer=solana_dot_corecast_dot_stream__message__pb2.BalanceUpdateStreamMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'solana_corecast.CoreCast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('solana_corecast.CoreCast', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoreCast(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DexTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/DexTrades',
            solana_dot_corecast_dot_request__pb2.SubscribeTradesRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.DexTradeStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DexOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/DexOrders',
            solana_dot_corecast_dot_request__pb2.SubscribeOrdersRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.DexOrderStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DexPools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/DexPools',
            solana_dot_corecast_dot_request__pb2.SubscribePoolsRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.PoolLiquidityChangeStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/Transactions',
            solana_dot_corecast_dot_request__pb2.SubscribeTransactionsRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.ParsedTransactionStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transfers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/Transfers',
            solana_dot_corecast_dot_request__pb2.SubscribeTransfersRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.TransferStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Balances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/solana_corecast.CoreCast/Balances',
            solana_dot_corecast_dot_request__pb2.SubscribeBalanceUpdateRequest.SerializeToString,
            solana_dot_corecast_dot_stream__message__pb2.BalanceUpdateStreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
